<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[darth10.github.io]]></title>
  <link href="http://darth10.github.io/atom.xml" rel="self"/>
  <link href="http://darth10.github.io/"/>
  <updated>2014-10-12T19:15:25+05:30</updated>
  <id>http://darth10.github.io/</id>
  <author>
    <name><![CDATA[Akhil Wali]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lazy sequences and streams]]></title>
    <link href="http://darth10.github.io/blog/2013/01/25/lazy-sequences-and-streams/"/>
    <updated>2013-01-25T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2013/01/25/lazy-sequences-and-streams</id>
    <content type="html"><![CDATA[<p>Functional languages have the notion of <em>lazy sequences</em>, which are an abstraction of infinite sequences that are stored using a small, finite amount of memory.
It would be wasteful to realize an entire infinite sequence before even using it.
The basic idea is to only call the function that generates the sequence when needed, and cache the results.
With lazy sequences, you don&#8217;t blow the stack and the elements in the sequence are not recalculated everytime.</p>

<!-- More -->


<p>Let&#8217;s look at how the two most popular and functional JVM languages handle lazy sequences.</p>

<p>Clojure has the <code>lazy-seq</code> macro to create lazy sequences.
Since most functions are lazy in Clojure, sequences generated by these functions are also lazy.
Here&#8217;s how the Fibonacci sequence is implemented in Clojure.</p>

<figure class='code'><figcaption><span>Fibonacci sequence in Clojure (fibo.clj)</span> <a href='http://darth10.github.io/downloads/code/clj/fibo.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fibo-seq</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map first </span>
</span><span class='line'>    <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]]</span> <span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)])</span> <span class="p">[</span><span class="mi">0</span><span class="nv">N</span> <span class="mi">1</span><span class="nv">N</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fibo-list</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">take </span><span class="nv">n</span> <span class="nv">fibo-seq</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fibo-last</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nf">fibo-list</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a really elegant implementation that uses the lazy <code>iterate</code> function.</p>

<p>Scala has the parameterized <code>Stream[T]</code> class to represent a lazy list.
Here&#8217;s what a Scala Fibonacci stream looks like.</p>

<figure class='code'><figcaption><span>Fibonacci sequence in Scala (Fibo.scala)</span> <a href='http://darth10.github.io/downloads/code/scala/Fibo.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Fibo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">fibo</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">BigInt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">#::</span>
</span><span class='line'>    <span class="nc">BigInt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">#::</span>
</span><span class='line'>    <span class="n">fibo</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="n">fibo</span><span class="o">.</span><span class="n">tail</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span> <span class="n">n</span> <span class="k">=&gt;</span> <span class="n">n</span><span class="o">.</span><span class="n">_1</span> <span class="o">+</span> <span class="n">n</span><span class="o">.</span><span class="n">_2</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fiboList</span> <span class="k">=</span> <span class="n">fibo</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="k">_:</span> <span class="kt">Int</span><span class="o">).</span><span class="n">toList</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fiboLast</span> <span class="k">=</span> <span class="n">fiboList</span><span class="o">(</span><span class="k">_:</span> <span class="kt">Int</span><span class="o">).</span><span class="n">last</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation uses the lazy right-associative <code>#::</code> function, which is actually the <code>Stream.cons</code> method.
There&#8217;s also an implicit conversion from a sequence to a stream, from the <code>Stream</code> companion object.
I&#8217;m sure Haskell programmers will eagerly point out the need for a <code>zipWith</code> function.</p>

<p>Let&#8217;s look at how these two implementations match up against eachother in terms of performance.
In Clojure, the <code>time</code> macro can be used to measure the time taken to evaluate a form.
There&#8217;s really no equivalent in Scala, so let&#8217;s implement our own.
We should be able to simply say <code>time(fiboLast(n))</code>, for example.</p>

<figure class='code'><figcaption><span> (Time.scala)</span> <a href='http://darth10.github.io/downloads/code/scala/Time.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">time</span><span class="o">[</span><span class="kt">R</span><span class="o">](</span><span class="n">block</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">R</span><span class="o">)</span><span class="k">:</span> <span class="kt">R</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">t0</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">t1</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Elapsed time: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">t1</span> <span class="o">-</span> <span class="n">t0</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the time taken to print the result of a statement in the REPL shouldn&#8217;t be measured.
We can ensure this by binding the result to a variable.
This is done by using <code>val fibo = time(fiboLast(5000)</code> in Scala, and <code>(time (def fibo (fibo-last 5000)))</code> in Clojure, for example.
Memory usage can be ignored, as the GC is invoked unpredictably.</p>

<p>And here are the results!</p>

<table border="0px">
  <tr>
    <td>
      <div id="postchart" style="width: 660px; height: 300px;"></div>
    </td>
  </tr>
</table>




<script src="http://darth10.github.io/javascripts/posts/lazy-sequences-and-streams.js" type="text/javascript"></script>


<p>A weird observation in the Scala implementation is that <code>fiboList(1)</code> takes 8-10 milliseconds to evaluate.
But Scala actually performs better on average, which is mostly due to the use of static types.</p>

<p>Interestingly, the Clojure <code>fibo-list</code> function evaluates in constant time, which is less than a millisecond!
Clojure also fetches cached elements in the lazy sequence much faster than Scala.
However, <code>fibo-last</code> performs linearly since the <code>last</code> function has linear time-complexity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The WebBrowser nightmare]]></title>
    <link href="http://darth10.github.io/blog/2012/09/23/the-webbrowser-nightmare/"/>
    <updated>2012-09-23T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2012/09/23/the-webbrowser-nightmare</id>
    <content type="html"><![CDATA[<p>I recently had to use the <code>WebBrowser</code> .NET component in a project.
The control is essentially Internet Explorer embedded in a <code>UserControl</code> component.
Although the facilities for JavaScript interoperability and DOM manipualtion are pretty great, the control fails to meet simpler needs.</p>

<!-- More -->


<p>To override keyboard input handing in the control, we need to set the <code>WebBrowserShortcutsEnabled</code> property to <code>false</code> and handle the <code>PreviewKeyDown</code> event.</p>

<figure class='code'><figcaption><span> (Normal.csharp)</span> <a href='http://darth10.github.io/downloads/code/cs/Normal.csharp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyControl</span> <span class="p">:</span> <span class="n">UserControl</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">WebBrowser</span> <span class="n">_webBrowser</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyControl</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>    
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">_webBrowser</span><span class="p">.</span><span class="n">WebBrowserShortcutsEnabled</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">_webBrowser</span><span class="p">.</span><span class="n">PreviewKeyDown</span> <span class="p">+=</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">PreviewKeyDownEventHandler</span><span class="p">(</span><span class="n">OnBrowserKeyInput</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">void</span> <span class="nf">OnBrowserKeyInput</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">PreviewKeyDownEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">KeyCode</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">W</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>          <span class="n">e</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">Control</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C-w pressed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Surprisingly, the <code>OnBrowserKeyInput</code> method is called twice; once when the key is pressed and another time when the key is released.
After some googling around, I found <a href="http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/f83d3d71-ea3e-4b18-a610-30a91fae060e/">this discussion</a> on MSDN, and it turns out to be an accepted problem with the control. The workaround requires explicity maintaining state and is quite ugly.</p>

<figure class='code'><figcaption><span> (Bad.csharp)</span> <a href='http://darth10.github.io/downloads/code/cs/Bad.csharp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">bool</span> <span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">OnBrowserKeyInput</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">PreviewKeyDownEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">_skipNextKeyDown</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">KeyCode</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">W</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="n">e</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">Control</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C-w pressed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the nightmare only begins there. The control doesn&#8217;t fire the event twice for some key combinations, and so the function ends up looking something like this.</p>

<figure class='code'><figcaption><span> (Worse.csharp)</span> <a href='http://darth10.github.io/downloads/code/cs/Worse.csharp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">bool</span> <span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">OnBrowserKeyInput</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">PreviewKeyDownEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">KeyCode</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">W</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="n">e</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="p">(</span><span class="n">Keys</span><span class="p">.</span><span class="n">Control</span> <span class="p">|</span> <span class="n">Keys</span><span class="p">.</span><span class="n">Alt</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C-M-w pressed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">_skipNextKeyDown</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">KeyCode</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">W</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="n">e</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">Control</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C-w pressed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing that bothered me most was that this was an accepted bug in the control. Even in the .NET 4.0 version.
The only way to figure out which keys made the event fire twice was by trial-and-error.
It&#8217;s almost like Microsoft was telling me not to use my own keyboard handling for the control, which sucked.
The end result is some ugly and error prone code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved to GitHub!]]></title>
    <link href="http://darth10.github.io/blog/2012/09/23/moved-to-github/"/>
    <updated>2012-09-23T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2012/09/23/moved-to-github</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">This blog has moved to <a href="http://darth10.github.com/">darth10.github.com</a>&nbsp;and is now hosted by <a href="http://pages.github.com/">GitHub Pages</a>.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstract and parameterized types]]></title>
    <link href="http://darth10.github.io/blog/2012/08/16/abstract-and-parameterized-types/"/>
    <updated>2012-08-16T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2012/08/16/abstract-and-parameterized-types</id>
    <content type="html"><![CDATA[<p>Scala supports both abstract and parameterized types, which are essentially revamped generics (in Java) or templates (in C++).</p>

<p>First off, methods can be parameterized, in order to abstract a generic type which can be used by it.
The <code>apply</code> method in companion objects is the best place to start.
Here&#8217;s an example from the implementation of the <code>List</code> class in the Scala library.</p>

<figure class='code'><figcaption><span> (List.scala)</span> <a href='http://darth10.github.io/downloads/code/scala/List.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">List</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">A*</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Classes and traits can be parameterized as well.</p>

<p>In most languages, types are designed to reduce casting, which can be an expensive operation.
Type systems also imply support for variance, i.e. <em>covariance</em> and <em>contravariance</em>.</p>

<!-- More -->


<p>However, consider the use of a parameterized type in a trait.
You <em>must</em> specify the parameterized type(s) in the deriving class, i.e. the deriving class <em>has</em> to be concrete.</p>

<figure class='code'><figcaption><span> (SimpleJsonComment.scala)</span> <a href='http://darth10.github.io/downloads/code/scala/SimpleJsonComment.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">java.util.SimpleDateFormat</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">JsonComment</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromJson</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JsonComment</span><span class="o">(</span><span class="n">comment</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">time</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">FromJson</span><span class="o">[</span><span class="kt">Comment</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">dateFormat</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromJson</span> <span class="k">=</span> <span class="nc">Comment</span><span class="o">(</span>
</span><span class='line'>    <span class="n">comment</span><span class="o">,</span>
</span><span class='line'>    <span class="n">user</span><span class="o">,</span>
</span><span class='line'>    <span class="n">dateFormat</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">time</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>JsonComment</code> has to define the type <code>Comment</code> (Ok, I admit this is a really bad example), and it cannot omit the type.
Also, it&#8217;s not possible to have members which are objects of the specified type.</p>

<p>Enter abstract types. Abstract types are types whose identity is not precisely known.
Deriving classes <em>may</em> specify the abstract type(s) in a base class.
As parameterized types have variance annotations, abstract types have <em>type bounds</em>.</p>

<figure class='code'><figcaption><span> (AbstractedJsonComment.scala)</span> <a href='http://darth10.github.io/downloads/code/scala/AbstractedJsonComment.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">java.util.</span><span class="o">{</span> <span class="nc">DateFormat</span><span class="o">,</span> <span class="nc">SimpleDateFormat</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">FromJson</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">C</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">F</span> <span class="k">&lt;:</span> <span class="kt">DateFormat</span>   <span class="c1">// upper type bound specified</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">formatter</span><span class="k">:</span> <span class="kt">F</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">parseTime</span><span class="o">(</span><span class="n">date</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">formatter</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">date</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromJson</span><span class="k">:</span> <span class="kt">C</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">AbstractJsonComment</span> <span class="k">extends</span> <span class="nc">FromJson</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">T</span> <span class="o">=</span> <span class="nc">Comment</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">AbstractFormattedJsonComment</span> <span class="k">extends</span> <span class="nc">AbstractJsonComment</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">F</span> <span class="o">=</span> <span class="nc">SimpleDateFormat</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JsonComment</span><span class="o">(</span><span class="n">comment</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">time</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">AbstractFormattedJsonComment</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">formatter</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromJson</span> <span class="k">=</span> <span class="nc">Comment</span><span class="o">(</span>
</span><span class='line'>    <span class="n">comment</span><span class="o">,</span>
</span><span class='line'>    <span class="n">user</span><span class="o">,</span>
</span><span class='line'>    <span class="n">parseTime</span><span class="o">(</span><span class="n">time</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>AbstractJsonComment</code> omits specifying the type <code>F</code> which has to be a subclass of <code>DateFormat</code>.
The class <code>AbstractFormattedJsonComment</code> specifies <code>F</code>, but has to be abstract as it doesn&#8217;t implement the functions in <code>FromJson</code>.
Thus, these two classes specify the abstract types separately, and <code>JsonComment</code> specifies the implementation.
Note that <code>FromJson</code> has a member of type <code>F</code>, which it uses to provide a partial implementation.</p>

<p>Almost any implementation with parameterized types can be turned into one with abstract types, and vice versa. However, abstract types make it easier to separate implementation and specification.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Studio Colors]]></title>
    <link href="http://darth10.github.io/blog/2011/03/22/visual-studio-colors/"/>
    <updated>2011-03-22T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2011/03/22/visual-studio-colors</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="text-align: left;">No one had posted an article on this! Goto<i style="text-align: left; "> Tools &gt; Options </i><span class="Apple-style-span" style="text-align: left; ">and select the </span><i style="text-align: left; ">Environment &gt; Fonts and Colors</i><span class="Apple-style-span" style="text-align: left; "> tab. It has a lot of options to tweak.</span></div><div><br /><div><br /><img src="http://3.bp.blogspot.com/-7AHG4Gy2Goc/TYjQ1P-4R-I/AAAAAAAABpY/LCd2FhRS2Bk/s400/b1.PNG" style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 233px;" border="0" alt="" id="BLOGGER_PHOTO_ID_5586944950995011554" /><div style="text-align: center;"><br /></div></div><div>And the aftermath&#8230;</div><div style="text-align: center;"><img src="http://2.bp.blogspot.com/-uSmudHV3TXc/TYjR1nm5z9I/AAAAAAAABpo/hiEynmgydYU/s400/b2.PNG" border="0" alt="" id="BLOGGER_PHOTO_ID_5586946056848527314" style="float: right; margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 10px; cursor: pointer; width: 400px; height: 293px; " /></div></div><div><br /></div></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Handy:-}</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[67B selection sort]]></title>
    <link href="http://darth10.github.io/blog/2010/01/13/67b-selection-sort/"/>
    <updated>2010-01-13T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2010/01/13/67b-selection-sort</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="Apple-style-span" style="font-family:verdana;"><span class="Apple-style-span" style="font-size: small;">Here&#8217;s the absolutely smallest array sorting function in C. It&#8217;s in fact an article written by </span></span><a href="http://www.cs.dartmouth.edu/~doug/"><span class="Apple-style-span" style="font-family:verdana;"><span class="Apple-style-span" style="font-size: small;">M. Doughlas McIlroy</span></span></a><span class="Apple-style-span" style="font-family:verdana;"><span class="Apple-style-span" style="font-size: small;"> of Darthmouth College, NH. It totals to 67B(ridiculously small) of memory.</span></span><div><span class="Apple-style-span" style="font-family:verdana;"><span class="Apple-style-span"><br /></span></span></div><div><span class="Apple-style-span" style="font-family:verdana;"><span class="Apple-style-span"><span class="Apple-style-span" style="font-size: small;">In the function </span><i><span class="Apple-style-span" style="font-size: small;">s</span></i><span class="Apple-style-span" style="font-size: small;">, </span><i><span class="Apple-style-span" style="font-size: small;">a</span></i><span class="Apple-style-span" style="font-size: small;"> is the starting address of the array, and </span><i><span class="Apple-style-span" style="font-size: small;">b</span></i><span class="Apple-style-span" style="font-size: small;"> is the address of the last element plus one; note the scale factor of a C integer type is generally 4 bytes. The function uses pointers gloriously. Took me like 5 minutes to get what&#8217;s being assigned where</span><span class="Apple-style-span" style="font-size:small;">.</span><br /></span></span></div><div><br /><script type="text/javascript">hljs.initHighlightingOnLoad(); </script><pre><code class="cpp">void sort(int* a, int* b)<br />{<br /> for (int* c = b, t; c > a;)<br /> if (t = *c--, *c > t) c[1] = *c, *c = t, c = b;<br />}</code></pre><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My IRC room]]></title>
    <link href="http://darth10.github.io/blog/2009/08/07/my-irc-room/"/>
    <updated>2009-08-07T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/08/07/my-irc-room</id>
    <content type="html"><![CDATA[<div class='post'>
<div><a href="http://www.xchat.org/">X-Chat</a> is the <a href="http://www.eclectric-fx.com/model/images/xwing.jpg">X-Wing</a> of IRC :P hehe</div><div><br /></div><div><br /></div><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_LayYGniQQRY/SnvaGpfUifI/AAAAAAAABMk/cmJtkMKMDRg/s1600-h/Screenshot.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 250px;" src="http://4.bp.blogspot.com/_LayYGniQQRY/SnvaGpfUifI/AAAAAAAABMk/cmJtkMKMDRg/s400/Screenshot.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5367123188693371378" onMouseDown="alert('Sneaky!')"/></a><br /><div><br /></div><div><a href="http://1.bp.blogspot.com/_LayYGniQQRY/SnvZ2dAGgWI/AAAAAAAABMc/UqXOeIw85SI/s1600-h/Screenshot.png"></a><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chasing the shade....]]></title>
    <link href="http://darth10.github.io/blog/2009/07/12/chasing-shade/"/>
    <updated>2009-07-12T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/07/12/chasing-shade</id>
    <content type="html"><![CDATA[<div class='post'>
<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_LayYGniQQRY/SljqH2P3crI/AAAAAAAABLA/4AwB3BYBcXo/s1600-h/DSCF0078.JPG"><img style="margin: 0pt 10px 10px 0pt; float: left; cursor: pointer; width: 400px; height: 300px;" src="http://1.bp.blogspot.com/_LayYGniQQRY/SljqH2P3crI/AAAAAAAABLA/4AwB3BYBcXo/s400/DSCF0078.JPG" alt="" id="BLOGGER_PHOTO_ID_5357289177299251890" border="0" /></a><span class="Apple-style-span"  style="font-family:'courier new';"><br /></span><br /><br /><br /><br /><a style="font-family: courier new;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_LayYGniQQRY/SljnJ61_RfI/AAAAAAAABJw/3iO-G9LojVs/s1600-h/DSCF0002.JPG"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 300px;" src="http://1.bp.blogspot.com/_LayYGniQQRY/SljnJ61_RfI/AAAAAAAABJw/3iO-G9LojVs/s400/DSCF0002.JPG" alt="" id="BLOGGER_PHOTO_ID_5357285914357745138" border="0" /></a><a style="font-family: courier new;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/Sljnf9kUueI/AAAAAAAABKA/yZwiPcRmaQw/s1600-h/DSCF0090.JPG"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 300px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/Sljnf9kUueI/AAAAAAAABKA/yZwiPcRmaQw/s400/DSCF0090.JPG" alt="" id="BLOGGER_PHOTO_ID_5357286293046082018" border="0" /></a><a style="font-family: courier new;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_LayYGniQQRY/Sljn0gYGvzI/AAAAAAAABKI/CCWh3BFDrSo/s1600-h/DSCF0020.JPG"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 300px;" src="http://3.bp.blogspot.com/_LayYGniQQRY/Sljn0gYGvzI/AAAAAAAABKI/CCWh3BFDrSo/s400/DSCF0020.JPG" alt="" id="BLOGGER_PHOTO_ID_5357286645987458866" border="0" /></a><a style="font-family: courier new;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_LayYGniQQRY/SljoLPnA9lI/AAAAAAAABKQ/LJkndZoAgiw/s1600-h/DSCF0035.JPG"><img style="margin: 0pt 10px 10px 0pt; float: left; cursor: pointer; width: 400px; height: 300px;" src="http://3.bp.blogspot.com/_LayYGniQQRY/SljoLPnA9lI/AAAAAAAABKQ/LJkndZoAgiw/s400/DSCF0035.JPG" alt="" id="BLOGGER_PHOTO_ID_5357287036623582802" border="0" /></a> <a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_LayYGniQQRY/Sljo5NQm4uI/AAAAAAAABKg/aaU8yb44k04/s1600-h/DSCF0083.JPG"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 300px;" src="http://1.bp.blogspot.com/_LayYGniQQRY/Sljo5NQm4uI/AAAAAAAABKg/aaU8yb44k04/s400/DSCF0083.JPG" alt="" id="BLOGGER_PHOTO_ID_5357287826266710754" border="0" /></a><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/Sljpj6w0cPI/AAAAAAAABKw/MdxtbTHFW14/s1600-h/DSCF0063.JPG"><img style="margin: 0pt 10px 10px 0pt; float: left; cursor: pointer; width: 400px; height: 300px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/Sljpj6w0cPI/AAAAAAAABKw/MdxtbTHFW14/s400/DSCF0063.JPG" alt="" id="BLOGGER_PHOTO_ID_5357288560035918066" border="0" /></a><span class="Apple-style-span"  style="font-family:'courier new';"><br /></span><br /><br /><a style="font-family: courier new;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/SljoVwt8cLI/AAAAAAAABKY/GAa96iMZEwA/s1600-h/DSCF0048.JPG"><img style="margin: 0pt 0pt 10px 10px; float: right; cursor: pointer; width: 400px; height: 300px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/SljoVwt8cLI/AAAAAAAABKY/GAa96iMZEwA/s400/DSCF0048.JPG" alt="" id="BLOGGER_PHOTO_ID_5357287217309708466" border="0" /></a><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_LayYGniQQRY/SljqSH5ej1I/AAAAAAAABLI/XstXujtIauk/s1600-h/DSCF0103.JPG" style="text-decoration: none;"><br /><div style="text-align: center;text-decoration: underline; "><span class="Apple-style-span"  style="color:#000000;"><span class="Apple-style-span" style="text-decoration: none;"><br /></span></span></div></a><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/Sljp2yZImBI/AAAAAAAABK4/dQs9Rf_ZdcE/s1600-h/DSCF0123.JPG"><img style="margin: 0pt 0pt 10px 10px; float: right; cursor: pointer; width: 400px; height: 300px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/Sljp2yZImBI/AAAAAAAABK4/dQs9Rf_ZdcE/s400/DSCF0123.JPG" alt="" id="BLOGGER_PHOTO_ID_5357288884206606354" border="0" /></a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML to PDF]]></title>
    <link href="http://darth10.github.io/blog/2009/05/20/html-to-pdf/"/>
    <updated>2009-05-20T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/20/html-to-pdf</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;">How to convert an HTML to a </span><span style="font-style: italic;font-family:verdana;" >.pdf </span><span style="font-family:verdana;">file from your terminal? Here&#8217;s how!</span>  <span style="font-family:verdana;"><br /><br />Well, one way to do this would be to do a </span><span style="font-style: italic;font-family:verdana;" >wget</span><span style="font-family:verdana;">, and then use </span><a href="http://www.htmldoc.org/"><span style="font-style: italic;font-family:verdana;" >htmldoc</span></a><span style="font-family:verdana;"> to convert the HTML file to a </span><span style="font-style: italic;font-family:verdana;" >.pdf </span><span style="font-family:verdana;">file</span><span style="font-style: italic;font-family:verdana;" >.<br /><br /></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/ShOeQF2E5mI/AAAAAAAABEQ/aBp1ZEjE9so/s1600-h/htmldoc.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 196px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/ShOeQF2E5mI/AAAAAAAABEQ/aBp1ZEjE9so/s400/htmldoc.png" alt="" id="BLOGGER_PHOTO_ID_5337783982648256098" border="0" /></a><br /><span style="font-family:verdana;">This is NOT the easy way to do the job; and the output is somewhat weird for some web pages. I&#8217;ve shown a man page for <a href="http://opengroup.org/onlinepubs/007908775/xsh/mmap.html"><span style="font-style: italic;">mmap</span></a> here; but if you try more complex CSS/HTML pages, conversion anomalies are observable.<br /><br /></span> <a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_LayYGniQQRY/ShOefnu8yoI/AAAAAAAABEY/wArTgP1tLzw/s1600-h/mmap1.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 304px;" src="http://4.bp.blogspot.com/_LayYGniQQRY/ShOefnu8yoI/AAAAAAAABEY/wArTgP1tLzw/s400/mmap1.png" alt="" id="BLOGGER_PHOTO_ID_5337784249443207810" border="0" /></a><span style="font-family:verdana;"><br />Wait! This is supposed to be a Py blog right? So here&#8217;s the Py way to do it! The key is a module called </span><a href="http://www.xhtml2pdf.com/doc/pisa-en.html"><span style="font-style: italic;font-family:verdana;" >ho.pisa</span></a><span style="font-family:verdana;">; which needs to be downloaded and installed the hard way on your system. Once you get it running, the conversion can be done from the command line using </span><span style="font-style: italic;font-family:verdana;" >pisa</span><span style="font-family:verdana;"> or <span style="font-style: italic;">xhtml2pdf</span>, or straight from a Py shell by doing an &#8217;<span style="font-style: italic;">import ho.pisa</span>&#8217; and scripting away.</span><br /><span style="font-family:verdana;"><br /></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_LayYGniQQRY/ShOgyHR-YqI/AAAAAAAABEg/ZAG0dfpujc0/s1600-h/pisa.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 196px;" src="http://4.bp.blogspot.com/_LayYGniQQRY/ShOgyHR-YqI/AAAAAAAABEg/ZAG0dfpujc0/s400/pisa.png" alt="" id="BLOGGER_PHOTO_ID_5337786766172512930" border="0" /></a><br /><span style="font-family:verdana;">Here&#8217;s what the generated <span style="font-style: italic;">.pdf</span> looks like. It&#8217;s a looks a lot neater than the one generated using <span style="font-style: italic;">htmldoc</span> if you ask me; plus it has fewer pages. Hence, Py rules!<br /><br /></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_LayYGniQQRY/ShOhC2134wI/AAAAAAAABEo/bPeVcy1TgsU/s1600-h/mmap2.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 338px;" src="http://4.bp.blogspot.com/_LayYGniQQRY/ShOhC2134wI/AAAAAAAABEo/bPeVcy1TgsU/s400/mmap2.png" alt="" id="BLOGGER_PHOTO_ID_5337787053817455362" border="0" /></a></div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>Deepti</div>
<div class='content'>
Nice..Will try it out and if it works for me..would thank you Then.</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network packets with Py]]></title>
    <link href="http://darth10.github.io/blog/2009/05/19/network-packets-with-py/"/>
    <updated>2009-05-19T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/19/network-packets-with-py</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;">This next week or so, I&#8217;ll have to start my project on <a href="http://en.wikipedia.org/wiki/Routing_Information_Protocol">RIP</a> (Routing Information Protocol). Apparently, we have to implement our own version of the protocol using UDP sockets in C. I&#8217;ll have to convince my friend to use bit fields for performance, but that&#8217;s a more social issue.</span><br /><br /><span style="font-family:verdana;">So I needed some quick way to get specifications on RIP; I mean the byte structure and stuff. I figured use </span><span style="font-style: italic;font-family:verdana;" ><a href="http://www.secdev.org/projects/scapy/">scapy</a>. </span><span style="font-family:verdana;">Its quite a k00L tool actually (hence this blog); and has a simple but elegant interface, which is nothing more than an extended Py shell. Auto-</span><span style="font-family:verdana;">completion is supported; so that&#8217;s good news for all you command-line artists out here.<br /></span><span style="font-family:verdana;"><br />Here&#8217;s how we dump an RIP packet straight to a </span><span style="font-style: italic;font-family:verdana;" >.pdf</span><span style="font-family:verdana;"> file.</span><br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_LayYGniQQRY/ShHzWOV44qI/AAAAAAAABEA/iuCFZQuEanw/s1600-h/scapy.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 356px; height: 400px;" src="http://4.bp.blogspot.com/_LayYGniQQRY/ShHzWOV44qI/AAAAAAAABEA/iuCFZQuEanw/s400/scapy.png" alt="" id="BLOGGER_PHOTO_ID_5337314596543324834" border="0" /></a><span style="font-family:verdana;">You could use a different reader; just change the <span style="font-style: italic;">conf.prog.pdfreader </span>object. The <span style="font-style: italic;">conf.prog </span>object holds a lot of information on helper programs, so the program could be tailored to use your favorite applications.<br /><br /></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_LayYGniQQRY/ShHpAbFaYVI/AAAAAAAABDw/DJgd0XPDros/s1600-h/conf.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 198px;" src="http://3.bp.blogspot.com/_LayYGniQQRY/ShHpAbFaYVI/AAAAAAAABDw/DJgd0XPDros/s400/conf.png" alt="" id="BLOGGER_PHOTO_ID_5337303226890477906" border="0" /></a><span style="font-family:verdana;">If you think that&#8217;s impressive, take a look at the packet dump; it&#8217;s very self explanatory.<br /><br /></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/ShHzqP7udTI/AAAAAAAABEI/x7bxvaH0osE/s1600-h/packet.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 145px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/ShHzqP7udTI/AAAAAAAABEI/x7bxvaH0osE/s400/packet.png" alt="" id="BLOGGER_PHOTO_ID_5337314940567844146" border="0" /></a><span style="font-style: italic;font-family:verdana;" ><a href="http://www.secdev.org/projects/scapy/">Scapy</a> </span><span style="font-family:verdana;">is more than just an educational tool. It comes with everything for network-induced chaos, from a sniffer to layer-2 sockets; plus it&#8217;s extensible through simple Py! </span> <span style="font-style: italic;"><br /></span></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We are outnumbered by machines ...]]></title>
    <link href="http://darth10.github.io/blog/2009/05/17/we-are-outnumbered-by-machines/"/>
    <updated>2009-05-17T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/17/we-are-outnumbered-by-machines</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;">Here are a few pics of my workstation. Okay okay I know it&#8217;s nothing to do with Py, but I figured it would add some reality to the blog. It&#8217;s a ThinkPad, running Xubuntu along with my own version of Compiz Fusion.<br /><br /></span><a style="font-family: verdana;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_LayYGniQQRY/Sg9hupVTW_I/AAAAAAAABBA/jEJXz0d20GA/s1600-h/DSCF0138.JPG"><img style="margin: 0pt 0pt 10px 10px; float: right; cursor: pointer; width: 230px; height: 172px;" src="http://3.bp.blogspot.com/_LayYGniQQRY/Sg9hupVTW_I/AAAAAAAABBA/jEJXz0d20GA/s320/DSCF0138.JPG" alt="" id="BLOGGER_PHOTO_ID_5336591537454406642" border="0" /></a><a style="font-family: verdana;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_LayYGniQQRY/Sg9hgoWgdJI/AAAAAAAABA4/In6Ddvkn4pY/s1600-h/DSCF0136.JPG"><img style="margin: 0pt 10px 10px 0pt; float: left; cursor: pointer; width: 246px; height: 184px;" src="http://4.bp.blogspot.com/_LayYGniQQRY/Sg9hgoWgdJI/AAAAAAAABA4/In6Ddvkn4pY/s320/DSCF0136.JPG" alt="" id="BLOGGER_PHOTO_ID_5336591296672855186" border="0" /></a><br /><br /><a style="font-family: verdana;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_LayYGniQQRY/Sg9iFiU0JzI/AAAAAAAABBQ/o4sCB8-c_a8/s1600-h/DSCF0143.JPG"><img style="margin: 0pt 0pt 10px 10px; float: right; cursor: pointer; width: 243px; height: 182px;" src="http://4.bp.blogspot.com/_LayYGniQQRY/Sg9iFiU0JzI/AAAAAAAABBQ/o4sCB8-c_a8/s320/DSCF0143.JPG" alt="" id="BLOGGER_PHOTO_ID_5336591930710304562" border="0" /></a><a style="font-family: verdana;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_LayYGniQQRY/Sg9h7D5NSYI/AAAAAAAABBI/z6oaixuzIYk/s1600-h/DSCF0140.JPG"><img style="margin: 0pt 10px 10px 0pt; float: left; cursor: pointer; width: 250px; height: 187px;" src="http://3.bp.blogspot.com/_LayYGniQQRY/Sg9h7D5NSYI/AAAAAAAABBI/z6oaixuzIYk/s320/DSCF0140.JPG" alt="" id="BLOGGER_PHOTO_ID_5336591750742755714" border="0" /></a><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><a style="font-family: verdana;" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_LayYGniQQRY/Sg9iUqCP3eI/AAAAAAAABBY/1G1dHz6qXbU/s1600-h/Screenshot.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 320px; height: 240px;" src="http://3.bp.blogspot.com/_LayYGniQQRY/Sg9iUqCP3eI/AAAAAAAABBY/1G1dHz6qXbU/s320/Screenshot.png" alt="" id="BLOGGER_PHOTO_ID_5336592190477950434" border="0" /></a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Control your browser]]></title>
    <link href="http://darth10.github.io/blog/2009/05/17/control-your-browser/"/>
    <updated>2009-05-17T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/17/control-your-browser</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;">I stumbled across this neat module </span><a href="http://docs.python.org/library/webbrowser.html"><span style="font-style: italic;font-family:verdana;">webbrowser</span></a><span style="font-family:verdana;">, and it also happens to be part of the standard Python(v2.5) library.  This script allows  you pass commands, along with required URLs, to any web browser, hence allowing you to control your favorite browser through a plain Python shell. </span><br /><br /><span style="font-family:verdana;">Here&#8217;s how its done : </span><span style="font-style: italic;font-family:verdana;">import webbrowser</span><span style="font-family:verdana;">. Simple! Your shell will help you do the rest. </span> <span style="font-family:verdana;">I used PyShel</span><span style="font-family:verdana;">l to control Firefox; but you could even use something as bland as a Python interpreter on a terminal. Also, the only reason I interfaced Firefox was that Chrome isn&#8217;t supported yet; Chrome rules!</span><br /><pre><code class="python">import webbrowser<br />f = webbrowser.get()    # returns 'firefox'<br />myblog = 'http://aebcode.blogspot.com'<br /><br />f.open_new_tab('http://www.google.com')<br />f.open_new_tab(myblog)<br /></code></pre><script type="text/javascript">hljs.initHighlightingOnLoad(); </script><span style="font-family:verdana;"><br />Here&#8217;s the result; Firefox complies! Note that the browser&#8217;s address bar is still empty.</span><div><span class="Apple-style-span"  style="font-family:verdana;"><br /></span></div><div><span style="font-family:verdana;"><br /></span><div><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/Sg-NQ_7lQhI/AAAAAAAABBo/B9nAniRCfDc/s1600-h/browser.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 286px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/Sg-NQ_7lQhI/AAAAAAAABBo/B9nAniRCfDc/s400/browser.png" alt="" id="BLOGGER_PHOTO_ID_5336639406636089874" border="0" /></a></div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[__name__ and HTTP servers]]></title>
    <link href="http://darth10.github.io/blog/2009/05/13/name-and-http-servers/"/>
    <updated>2009-05-13T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/13/name-and-http-servers</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;"><span style="font-family:verdana;">The </span><span style="font-style: italic;font-family:verdana;" >__name__</span><span style="font-family:verdana;"> built-in python variable which describes exactly that - its the name of the module during runtime. So py modules that want to perform a particular action when the module is run, and probably do something else when imported by another module, use this variable. It also facilitates module testing if you think about it.</span></span><br /><span style="font-family:verdana;"><span style="font-family:verdana;"><br /></span><span style="font-family:verdana;">So ideally, every py module that is intended to be reused must have something like this in it, preferably at the end.<br /><br /></span></span><br /><pre><code class="python">if __name__ == __main__:<br />    print "Just got executed!"<br />else:<br />    print "Got imported! I'm so cool!"<br /></code></pre><script type="text/javascript">hljs.initHighlightingOnLoad(); </script><br /><span style="font-family:verdana;">A lot of the py modules that are part of the standard python library use this in quite profound ways. For example, the <span style="font-style: italic;">SimpleHTTPServer</span> module, which is run as shown below, starts a small but convincing HTTP-based file server hosting the current working directory.</span><br /><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:monospace;"><br /></span></span></span></span></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_LayYGniQQRY/Sg-vjfQOSyI/AAAAAAAABCA/SMcNN_2_DwI/s1600-h/http.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 226px;" src="http://1.bp.blogspot.com/_LayYGniQQRY/Sg-vjfQOSyI/AAAAAAAABCA/SMcNN_2_DwI/s400/http.png" alt="" id="BLOGGER_PHOTO_ID_5336677107677154082" border="0" /></a><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:monospace;"><br /></span><span style="font-family:verdana;">Here&#8217;s what the server &#8230;.um&#8230;. &#8220;serves&#8221; like :P<br /></span></span></span><span><span style="font-family:verdana;"><pre class="programlisting"><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/Sgp_w2wuwtI/AAAAAAAAA1M/vBP8aT_4FVk/s1600-h/Screenshot.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 300px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/Sgp_w2wuwtI/AAAAAAAAA1M/vBP8aT_4FVk/s400/Screenshot.png" alt="" id="BLOGGER_PHOTO_ID_5335217185884127954" border="0" /></a></pre></span></span><br /><span style="font-family:verdana;">So people! Don&#8217;t overlook the use <span style="font-style: italic;">__name__</span> in your code thinking no one will actually like your puny little module.<br /></span></span></span></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The first thing to do...]]></title>
    <link href="http://darth10.github.io/blog/2009/05/13/first-thing-to-do/"/>
    <updated>2009-05-13T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/13/first-thing-to-do</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;">I thought of writing a py script to help with sharing blog stuff, so here goes.</span> <span style="font-family:verdana;">The usage of</span><span style="font-style: italic; font-family: verdana;"> os.mkdir()</span><span style="font-family:verdana;"> is obvious, but to name the directory uniquely a lot of strategies are possible. I just figured as I would blog at a daily basis at best, just use </span><span style="font-style: italic; font-family: verdana;">time.gmtime()</span><span style="font-family:verdana;">.</span><br /><br /><pre><code class="python">#!/usr/bin/python<br />import os<br />from time import strftime,gmtime<br /><br />date = strftime("%a.%d.%b%Y", gtime())<br />try:<br />    os.mkdir(date, 0700)<br />except OSError:<br />    print "Haven't you already done this today?"<br />else:<br />    print "Created directory ", date<br /></code></pre><script type="text/javascript">hljs.initHighlightingOnLoad(); </script><br /><span style="font-family:verdana;">So that basically does it I guess; nothing too fan</span><span style="font-family:verdana;">cy.</span> <span style="font-family:verdana;">If you have any better ideas about solving the unique directory problem please leave your comments.<br /><br /></span><a style="font-family: verdana;" href="http://3.bp.blogspot.com/_LayYGniQQRY/SgpUXySbloI/AAAAAAAAA1E/L8O7Oex54B4/s1600-h/Screenshot-Terminal+-+darth10@Deathstar:+~-pymatter-blogs.png" onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}"><img style="margin: 0pt 0pt 10px 10px; float: right; cursor: pointer; width: 400px; height: 226px;" src="http://3.bp.blogspot.com/_LayYGniQQRY/SgpUXySbloI/AAAAAAAAA1E/L8O7Oex54B4/s400/Screenshot-Terminal+-+darth10@Deathstar:+~-pymatter-blogs.png" alt="" id="BLOGGER_PHOTO_ID_5335169476186576514" border="0" /></a></div>
]]></content>
  </entry>
  
</feed>
