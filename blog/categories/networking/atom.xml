<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Networking | darth10.github.io]]></title>
  <link href="http://darth10.github.io/blog/categories/networking/atom.xml" rel="self"/>
  <link href="http://darth10.github.io/"/>
  <updated>2014-10-12T19:15:25+05:30</updated>
  <id>http://darth10.github.io/</id>
  <author>
    <name><![CDATA[Akhil Wali]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Network packets with Py]]></title>
    <link href="http://darth10.github.io/blog/2009/05/19/network-packets-with-py/"/>
    <updated>2009-05-19T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/19/network-packets-with-py</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;">This next week or so, I'll have to start my project on <a href="http://en.wikipedia.org/wiki/Routing_Information_Protocol">RIP</a> (Routing Information Protocol). Apparently, we have to implement our own version of the protocol using UDP sockets in C. I'll have to convince my friend to use bit fields for performance, but that's a more social issue.</span><br /><br /><span style="font-family:verdana;">So I needed some quick way to get specifications on RIP; I mean the byte structure and stuff. I figured use </span><span style="font-style: italic;font-family:verdana;" ><a href="http://www.secdev.org/projects/scapy/">scapy</a>. </span><span style="font-family:verdana;">Its quite a k00L tool actually (hence this blog); and has a simple but elegant interface, which is nothing more than an extended Py shell. Auto-</span><span style="font-family:verdana;">completion is supported; so that's good news for all you command-line artists out here.<br /></span><span style="font-family:verdana;"><br />Here's how we dump an RIP packet straight to a </span><span style="font-style: italic;font-family:verdana;" >.pdf</span><span style="font-family:verdana;"> file.</span><br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_LayYGniQQRY/ShHzWOV44qI/AAAAAAAABEA/iuCFZQuEanw/s1600-h/scapy.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 356px; height: 400px;" src="http://4.bp.blogspot.com/_LayYGniQQRY/ShHzWOV44qI/AAAAAAAABEA/iuCFZQuEanw/s400/scapy.png" alt="" id="BLOGGER_PHOTO_ID_5337314596543324834" border="0" /></a><span style="font-family:verdana;">You could use a different reader; just change the <span style="font-style: italic;">conf.prog.pdfreader </span>object. The <span style="font-style: italic;">conf.prog </span>object holds a lot of information on helper programs, so the program could be tailored to use your favorite applications.<br /><br /></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_LayYGniQQRY/ShHpAbFaYVI/AAAAAAAABDw/DJgd0XPDros/s1600-h/conf.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 198px;" src="http://3.bp.blogspot.com/_LayYGniQQRY/ShHpAbFaYVI/AAAAAAAABDw/DJgd0XPDros/s400/conf.png" alt="" id="BLOGGER_PHOTO_ID_5337303226890477906" border="0" /></a><span style="font-family:verdana;">If you think that's impressive, take a look at the packet dump; it's very self explanatory.<br /><br /></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/ShHzqP7udTI/AAAAAAAABEI/x7bxvaH0osE/s1600-h/packet.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 145px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/ShHzqP7udTI/AAAAAAAABEI/x7bxvaH0osE/s400/packet.png" alt="" id="BLOGGER_PHOTO_ID_5337314940567844146" border="0" /></a><span style="font-style: italic;font-family:verdana;" ><a href="http://www.secdev.org/projects/scapy/">Scapy</a> </span><span style="font-family:verdana;">is more than just an educational tool. It comes with everything for network-induced chaos, from a sniffer to layer-2 sockets; plus it's extensible through simple Py! </span> <span style="font-style: italic;"><br /></span></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Control your browser]]></title>
    <link href="http://darth10.github.io/blog/2009/05/17/control-your-browser/"/>
    <updated>2009-05-17T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/17/control-your-browser</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;">I stumbled across this neat module </span><a href="http://docs.python.org/library/webbrowser.html"><span style="font-style: italic;font-family:verdana;">webbrowser</span></a><span style="font-family:verdana;">, and it also happens to be part of the standard Python(v2.5) library.  This script allows  you pass commands, along with required URLs, to any web browser, hence allowing you to control your favorite browser through a plain Python shell. </span><br /><br /><span style="font-family:verdana;">Here's how its done : </span><span style="font-style: italic;font-family:verdana;">import webbrowser</span><span style="font-family:verdana;">. Simple! Your shell will help you do the rest. </span> <span style="font-family:verdana;">I used PyShel</span><span style="font-family:verdana;">l to control Firefox; but you could even use something as bland as a Python interpreter on a terminal. Also, the only reason I interfaced Firefox was that Chrome isn't supported yet; Chrome rules!</span><br /><pre><code class="python">import webbrowser<br />f = webbrowser.get()    # returns 'firefox'<br />myblog = 'http://aebcode.blogspot.com'<br /><br />f.open_new_tab('http://www.google.com')<br />f.open_new_tab(myblog)<br /></code></pre><script type="text/javascript">hljs.initHighlightingOnLoad(); </script><span style="font-family:verdana;"><br />Here's the result; Firefox complies! Note that the browser's address bar is still empty.</span><div><span class="Apple-style-span"  style="font-family:verdana;"><br /></span></div><div><span style="font-family:verdana;"><br /></span><div><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/Sg-NQ_7lQhI/AAAAAAAABBo/B9nAniRCfDc/s1600-h/browser.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 286px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/Sg-NQ_7lQhI/AAAAAAAABBo/B9nAniRCfDc/s400/browser.png" alt="" id="BLOGGER_PHOTO_ID_5336639406636089874" border="0" /></a></div></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[__name__ and HTTP servers]]></title>
    <link href="http://darth10.github.io/blog/2009/05/13/name-and-http-servers/"/>
    <updated>2009-05-13T00:00:00+05:30</updated>
    <id>http://darth10.github.io/blog/2009/05/13/name-and-http-servers</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family:verdana;"><span style="font-family:verdana;">The </span><span style="font-style: italic;font-family:verdana;" >__name__</span><span style="font-family:verdana;"> built-in python variable which describes exactly that - its the name of the module during runtime. So py modules that want to perform a particular action when the module is run, and probably do something else when imported by another module, use this variable. It also facilitates module testing if you think about it.</span></span><br /><span style="font-family:verdana;"><span style="font-family:verdana;"><br /></span><span style="font-family:verdana;">So ideally, every py module that is intended to be reused must have something like this in it, preferably at the end.<br /><br /></span></span><br /><pre><code class="python">if __name__ == __main__:<br />    print "Just got executed!"<br />else:<br />    print "Got imported! I'm so cool!"<br /></code></pre><script type="text/javascript">hljs.initHighlightingOnLoad(); </script><br /><span style="font-family:verdana;">A lot of the py modules that are part of the standard python library use this in quite profound ways. For example, the <span style="font-style: italic;">SimpleHTTPServer</span> module, which is run as shown below, starts a small but convincing HTTP-based file server hosting the current working directory.</span><br /><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:monospace;"><br /></span></span></span></span></span><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_LayYGniQQRY/Sg-vjfQOSyI/AAAAAAAABCA/SMcNN_2_DwI/s1600-h/http.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 226px;" src="http://1.bp.blogspot.com/_LayYGniQQRY/Sg-vjfQOSyI/AAAAAAAABCA/SMcNN_2_DwI/s400/http.png" alt="" id="BLOGGER_PHOTO_ID_5336677107677154082" border="0" /></a><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:verdana;"><span style="font-family:monospace;"><br /></span><span style="font-family:verdana;">Here's what the server ....um.... "serves" like :P<br /></span></span></span><span><span style="font-family:verdana;"><pre class="programlisting"><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_LayYGniQQRY/Sgp_w2wuwtI/AAAAAAAAA1M/vBP8aT_4FVk/s1600-h/Screenshot.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 300px;" src="http://2.bp.blogspot.com/_LayYGniQQRY/Sgp_w2wuwtI/AAAAAAAAA1M/vBP8aT_4FVk/s400/Screenshot.png" alt="" id="BLOGGER_PHOTO_ID_5335217185884127954" border="0" /></a></pre></span></span><br /><span style="font-family:verdana;">So people! Don't overlook the use <span style="font-style: italic;">__name__</span> in your code thinking no one will actually like your puny little module.<br /></span></span></span></div>

]]></content>
  </entry>
  
</feed>
