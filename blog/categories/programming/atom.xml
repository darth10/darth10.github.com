<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | darth10.github.com]]></title>
  <link href="http://darth10.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://darth10.github.com/"/>
  <updated>2013-03-08T01:08:40+05:30</updated>
  <id>http://darth10.github.com/</id>
  <author>
    <name><![CDATA[Akhil Wali]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lazy sequences and streams]]></title>
    <link href="http://darth10.github.com/blog/2013/01/25/lazy-sequences-and-streams/"/>
    <updated>2013-01-25T00:00:00+05:30</updated>
    <id>http://darth10.github.com/blog/2013/01/25/lazy-sequences-and-streams</id>
    <content type="html"><![CDATA[<p>Functional languages have the notion of <em>lazy sequences</em>, which are an abstraction of infinite sequences that are stored using a small, finite amount of memory.
It would be wasteful to realize an entire infinite sequence before even using it.
The basic idea is to only call the function that generates the sequence when needed, and cache the results.
With lazy sequences, you don't blow the stack and the elements in the sequence are not recalculated everytime.</p>

<!-- More -->


<p>Let's look at how the two most popular and functional JVM languages handle lazy sequences.</p>

<p>Clojure has the <code>lazy-seq</code> macro to create lazy sequences.
Since most functions are lazy in Clojure, sequences generated by these functions are also lazy.
Here's how the Fibonacci sequence is implemented in Clojure.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Fibonacci sequence in Clojure (fibo.clj)</span> <a href='/downloads/code/clj/fibo.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">fibo-seq</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map first </span>
</span><span class='line'>    <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]]</span> <span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)])</span> <span class="p">[</span><span class="mi">0</span><span class="nv">N</span> <span class="mi">1</span><span class="nv">N</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fibo-list</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">take </span><span class="nv">n</span> <span class="nv">fibo-seq</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fibo-last</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nf">fibo-list</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is a really elegant implementation that uses the lazy <code>iterate</code> function.</p>

<p>Scala has the parameterized <code>Stream[T]</code> class to represent a lazy list.
Here's what a Scala Fibonacci stream looks like.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Fibonacci sequence in Scala (Fibo.scala)</span> <a href='/downloads/code/scala/Fibo.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Fibo</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">fibo</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>    <span class="nc">BigInt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">#::</span>
</span><span class='line'>    <span class="nc">BigInt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">#::</span>
</span><span class='line'>    <span class="n">fibo</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="n">fibo</span><span class="o">.</span><span class="n">tail</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span> <span class="n">n</span> <span class="k">=&gt;</span> <span class="n">n</span><span class="o">.</span><span class="n">_1</span> <span class="o">+</span> <span class="n">n</span><span class="o">.</span><span class="n">_2</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fiboList</span> <span class="k">=</span> <span class="n">fibo</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="k">_:</span> <span class="kt">Int</span><span class="o">).</span><span class="n">toList</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fiboLast</span> <span class="k">=</span> <span class="n">fiboList</span><span class="o">(</span><span class="k">_:</span> <span class="kt">Int</span><span class="o">).</span><span class="n">last</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This implementation uses the lazy right-associative <code>#::</code> function, which is actually the <code>Stream.cons</code> method.
There's also an implicit conversion from a sequence to a stream, from the <code>Stream</code> companion object.
I'm sure Haskell programmers will eagerly point out the need for a <code>zipWith</code> function.</p>

<p>Let's look at how these two implementations match up against eachother in terms of performance.
In Clojure, the <code>time</code> macro can be used to measure the time taken to evaluate a form.
There's really no equivalent in Scala, so let's implement our own.
We should be able to simply say <code>time(fiboLast(n))</code>, for example.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Time.scala)</span> <a href='/downloads/code/scala/Time.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">time</span><span class="o">[</span><span class="kt">R</span><span class="o">](</span><span class="n">block</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">R</span><span class="o">)</span><span class="k">:</span> <span class="kt">R</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">t0</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">t1</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Elapsed time: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">t1</span> <span class="o">-</span> <span class="n">t0</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the time taken to print the result of a statement in the REPL shouldn't be measured.
We can ensure this by binding the result to a variable.
This is done by using <code>val fibo = time(fiboLast(5000)</code> in Scala, and <code>(time (def fibo (fibo-last 5000)))</code> in Clojure, for example.
Memory usage can be ignored, as the GC is invoked unpredictably.</p>

<p>And here are the results!</p>

<table border="0px">
  <tr>
    <td>
      <div id="postchart" style="width: 660px; height: 300px;"></div>
    </td>
  </tr>
</table>




<script src="/javascripts/posts/lazy-sequences-and-streams.js" type="text/javascript"></script>


<p>A weird observation in the Scala implementation is that <code>fiboList(1)</code> takes 8-10 milliseconds to evaluate.
But Scala actually performs better on average, which is mostly due to the use of static types.</p>

<p>Interestingly, the Clojure <code>fibo-list</code> function evaluates in constant time, which is less than a millisecond!
Clojure also fetches cached elements in the lazy sequence much faster than Scala.
However, <code>fibo-last</code> performs linearly since the <code>last</code> function has linear time-complexity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The WebBrowser nightmare]]></title>
    <link href="http://darth10.github.com/blog/2012/09/23/the-webbrowser-nightmare/"/>
    <updated>2012-09-23T00:00:00+05:30</updated>
    <id>http://darth10.github.com/blog/2012/09/23/the-webbrowser-nightmare</id>
    <content type="html"><![CDATA[<p>I recently had to use the <code>WebBrowser</code> .NET component in a project.
The control is essentially Internet Explorer embedded in a <code>UserControl</code> component.
Although the facilities for JavaScript interoperability and DOM manipualtion are pretty great, the control fails to meet simpler needs.</p>

<!-- More -->


<p>To override keyboard input handing in the control, we need to set the <code>WebBrowserShortcutsEnabled</code> property to <code>false</code> and handle the <code>PreviewKeyDown</code> event.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Normal.csharp)</span> <a href='/downloads/code/cs/Normal.csharp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyControl</span> <span class="p">:</span> <span class="n">UserControl</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">WebBrowser</span> <span class="n">_webBrowser</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">public</span> <span class="nf">MyControl</span><span class="p">()</span>
</span><span class='line'>	<span class="p">{</span>	
</span><span class='line'>		
</span><span class='line'>		<span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">_webBrowser</span><span class="p">.</span><span class="n">WebBrowserShortcutsEnabled</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>		<span class="n">_webBrowser</span><span class="p">.</span><span class="n">PreviewKeyDown</span> <span class="p">+=</span>
</span><span class='line'>			<span class="k">new</span> <span class="nf">PreviewKeyDownEventHandler</span><span class="p">(</span><span class="n">OnBrowserKeyInput</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">private</span> <span class="k">void</span> <span class="nf">OnBrowserKeyInput</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">PreviewKeyDownEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">KeyCode</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">W</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>		    <span class="n">e</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">Control</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C-w pressed&quot;</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Surprisingly, the <code>OnBrowserKeyInput</code> method is called twice; once when the key is pressed and another time when the key is released.
After some googling around, I found <a href="http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/f83d3d71-ea3e-4b18-a610-30a91fae060e/">this discussion</a> on MSDN, and it turns out to be an accepted problem with the control. The workaround requires explicity maintaining state and is quite ugly.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Bad.csharp)</span> <a href='/downloads/code/cs/Bad.csharp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">bool</span> <span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">OnBrowserKeyInput</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">PreviewKeyDownEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">_skipNextKeyDown</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>		<span class="k">return</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">KeyCode</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">W</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>	    <span class="n">e</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">Control</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C-w pressed&quot;</span><span class="p">);</span>
</span><span class='line'>		<span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the nightmare only begins there. The control doesn't fire the event twice for some key combinations, and so the function ends up looking something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Worse.csharp)</span> <a href='/downloads/code/cs/Worse.csharp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">bool</span> <span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">OnBrowserKeyInput</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">PreviewKeyDownEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">KeyCode</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">W</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>	    <span class="n">e</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="p">(</span><span class="n">Keys</span><span class="p">.</span><span class="n">Control</span> <span class="p">|</span> <span class="n">Keys</span><span class="p">.</span><span class="n">Alt</span><span class="p">))</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C-M-w pressed&quot;</span><span class="p">);</span>
</span><span class='line'>		<span class="k">return</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">_skipNextKeyDown</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>		<span class="k">return</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">KeyCode</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">W</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>	    <span class="n">e</span><span class="p">.</span><span class="n">Modifiers</span> <span class="p">==</span> <span class="n">Keys</span><span class="p">.</span><span class="n">Control</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C-w pressed&quot;</span><span class="p">);</span>
</span><span class='line'>		<span class="n">_skipNextKeyDown</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The thing that bothered me most was that this was an accepted bug in the control. Even in the .NET 4.0 version.
The only way to figure out which keys made the event fire twice was by trial-and-error.
It's almost like Microsoft was telling me not to use my own keyboard handling for the control, which sucked.
The end result is some ugly and error prone code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstract and parameterized types]]></title>
    <link href="http://darth10.github.com/blog/2012/08/16/abstract-and-parameterized-types/"/>
    <updated>2012-08-16T00:00:00+05:30</updated>
    <id>http://darth10.github.com/blog/2012/08/16/abstract-and-parameterized-types</id>
    <content type="html"><![CDATA[<p>Scala supports both abstract and parameterized types, which are essentially revamped generics (in Java) or templates (in C++).</p>

<p>First off, methods can be parameterized, in order to abstract a generic type which can be used by it.
The <code>apply</code> method in companion objects is the best place to start.
Here's an example from the implementation of the <code>List</code> class in the Scala library.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (List.scala)</span> <a href='/downloads/code/scala/List.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">List</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">A*</span><span class="o">)</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">xs</span><span class="o">.</span><span class="n">toList</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Classes and traits can be parameterized as well.</p>

<p>In most languages, types are designed to reduce casting, which can be an expensive operation.
Type systems also imply support for variance, i.e. <em>covariance</em> and <em>contravariance</em>.</p>

<!-- More -->


<p>However, consider the use of a parameterized type in a trait.
You <em>must</em> specify the parameterized type(s) in the deriving class, i.e. the deriving class <em>has</em> to be concrete.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (SimpleJsonComment.scala)</span> <a href='/downloads/code/scala/SimpleJsonComment.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">java.util.SimpleDateFormat</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">JsonComment</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromJson</span><span class="k">:</span> <span class="kt">T</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JsonComment</span><span class="o">(</span><span class="n">comment</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">time</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">FromJson</span><span class="o">[</span><span class="kt">Comment</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">dateFormat</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromJson</span> <span class="k">=</span> <span class="nc">Comment</span><span class="o">(</span>
</span><span class='line'>    <span class="n">comment</span><span class="o">,</span>
</span><span class='line'>    <span class="n">user</span><span class="o">,</span>
</span><span class='line'>    <span class="n">dateFormat</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">time</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>JsonComment</code> has to define the type <code>Comment</code> (Ok, I admit this is a really bad example), and it cannot omit the type.
Also, it's not possible to have members which are objects of the specified type.</p>

<p>Enter abstract types. Abstract types are types whose identity is not precisely known.
Deriving classes <em>may</em> specify the abstract type(s) in a base class.
As parameterized types have variance annotations, abstract types have <em>type bounds</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (AbstractedJsonComment.scala)</span> <a href='/downloads/code/scala/AbstractedJsonComment.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">java.util.</span><span class="o">{</span> <span class="nc">DateFormat</span><span class="o">,</span> <span class="nc">SimpleDateFormat</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">FromJson</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">C</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">F</span> <span class="k">&lt;:</span> <span class="kt">DateFormat</span>	<span class="c1">// upper type bound specified</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">formatter</span><span class="k">:</span> <span class="kt">F</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">parseTime</span><span class="o">(</span><span class="n">date</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">formatter</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">date</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromJson</span><span class="k">:</span> <span class="kt">C</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">AbstractJsonComment</span> <span class="k">extends</span> <span class="nc">FromJson</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">T</span> <span class="o">=</span> <span class="nc">Comment</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">AbstractFormattedJsonComment</span> <span class="k">extends</span> <span class="nc">AbstractJsonComment</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">F</span> <span class="o">=</span> <span class="nc">SimpleDateFormat</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JsonComment</span><span class="o">(</span><span class="n">comment</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">user</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">time</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">AbstractFormattedJsonComment</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">formatter</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromJson</span> <span class="k">=</span> <span class="nc">Comment</span><span class="o">(</span>
</span><span class='line'>    <span class="n">comment</span><span class="o">,</span>
</span><span class='line'>    <span class="n">user</span><span class="o">,</span>
</span><span class='line'>    <span class="n">parseTime</span><span class="o">(</span><span class="n">time</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, <code>AbstractJsonComment</code> omits specifying the type <code>F</code> which has to be a subclass of <code>DateFormat</code>.
The class <code>AbstractFormattedJsonComment</code> specifies <code>F</code>, but has to be abstract as it doesn't implement the functions in <code>FromJson</code>.
Thus, these two classes specify the abstract types separately, and <code>JsonComment</code> specifies the implementation.
Note that <code>FromJson</code> has a member of type <code>F</code>, which it uses to provide a partial implementation.</p>

<p>Almost any implementation with parameterized types can be turned into one with abstract types, and vice versa. However, abstract types make it easier to separate implementation and specification.</p>
]]></content>
  </entry>
  
</feed>
